// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id, token, expires_at, revoked_at
FROM refresh_tokens
WHERE token = $1
`

type GetUserFromRefreshTokenRow struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (GetUserFromRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i GetUserFromRefreshTokenRow
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO refresh_tokens (token, user_id, expires_at)
VALUES ($1, $2, $3)
`

type InsertRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = $2,
    updated_at = NOW()
WHERE token = $1
`

type RevokeRefreshTokenParams struct {
	Token     string
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, arg.Token, arg.RevokedAt)
	return err
}
